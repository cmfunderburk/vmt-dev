---
description: Systematic workflow for planning and implementing new features
---

# Feature Development Checklist

Use this concise workflow to add features while preserving determinism, type safety, and backward compatibility.

## Pre-Development
- Align with roadmap: see [docs/3_strategic_roadmap.md](mdc:docs/3_strategic_roadmap.md)
- Identify phase (A–D) and prerequisites
- Review analogous implementations, tests, and relevant docs
- For major features, create a brief plan in `docs/BIG/` or `docs/tmp/` (overview, design decisions, checklist, success criteria)

## Implementation
- Data structures: update `Agent`, `Grid`, `ScenarioParams` with defaults; validate in `ScenarioParams.validate()`
- Determinism: follow [.cursor/rules/core-invariants.mdc](mdc:.cursor/rules/core-invariants.mdc) (sorted loops, tie-breakers, round‑half‑up, no mid‑tick quote changes)
- Integrate systems: add/modify under `src/vmt_engine/systems/`; respect sacred 7‑phase order; update `simulation.py`
- Performance: use `SpatialIndex` for proximity; batch DB writes; profile hot paths
- Docstrings: document purpose, invariants, performance considerations (keep concise)

## Schema & Telemetry
- Update `src/scenarios/schema.py` and `loader.py` if adding YAML params
- Extend telemetry in `src/telemetry/database.py` and `db_loggers.py` using additive changes and defaults
- After schema changes: see DB gotcha in `core-invariants.mdc`; rerun tests

## Testing
- Unit tests: basic, edge cases, determinism, backward compatibility
- Integration tests: realistic scenarios; verify telemetry and GUI (if applicable)
- Commands:
  - `pytest -q` (all tests must pass)
  - `pytest tests/test_<feature>.py -v`
  - `pytest -k "not money" -v` (legacy focus)
- Determinism: use `scripts/compare_telemetry_snapshots.py`

## Demos & Docs
- Add a small demo scenario (`scenarios/<feature>_demo.yaml`) with comments; verify via CLI/GUI
- Update docs as needed: CHANGELOG, technical manual/type contracts if architecture/types changed
- Update `.cursor/rules/` only if new patterns are introduced

## Pre-Commit Final Checklist
- Code quality: no commented code/debug prints/TODOs without tracking; types added; consistent formatting
- Determinism & compatibility: verified same‑seed determinism; old scenarios run; no breaking changes
- Database: schema additions documented; defaults present; validated end‑to‑end
- Performance: no significant regression; spatial queries use `SpatialIndex`; DB writes batched

## Feature-Specific Notes
- Economic features: validate theory, extreme parameters; add visuals for pedagogy; see `econ/utility.py`, `systems/trading.py`, `systems/quotes.py`
- Spatial features: Manhattan distance; deterministic tie‑breakers; `SpatialIndex`; test various grid sizes; see `systems/movement.py`, `core/spatial_index.py`
- GUI features: test responsiveness; tooltips/help; handle empty data; see `src/vmt_launcher/`, `src/vmt_log_viewer/`

## Pitfalls (avoid)
- Unsored loops; mid‑tick quote changes; float inventories; O(N²) proximity scans; adding logic in wrong phase; breaking round‑half‑up

## Quick Commands
```bash
pytest -q
python main.py scenarios/demo.yaml --seed 42
python scripts/benchmark_performance.py
```
