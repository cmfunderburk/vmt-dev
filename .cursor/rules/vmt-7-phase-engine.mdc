---
alwaysApply: true
description: VMT 7-Phase Simulation Engine Architecture
---

# VMT 7-Phase Simulation Engine

The simulation proceeds in **7 distinct phases per tick** in strict deterministic order. This ordering is crucial for reproducibility.

## Phase Sequence (Always in Order)

1. **Perception** - Agents observe local environment (neighbors, resources, quotes)
2. **Decision** - Three-pass pairing algorithm with money-aware surplus calculation
3. **Movement** - Agents move toward targets (partners, resources)
4. **Trade** - Paired agents within interaction_radius attempt trades
5. **Forage** - Agents harvest resources (unpaired agents only)
6. **Regeneration** - Resource cells regenerate over time
7. **Housekeeping** - Quote refresh, pairing integrity, telemetry logging

## Key Files

- **Main Engine:** [src/vmt_engine/simulation.py](mdc:src/vmt_engine/simulation.py) - Core simulation loop
- **Decision System:** [src/vmt_engine/systems/decision.py](mdc:src/vmt_engine/systems/decision.py) - Pairing logic
- **Trading System:** [src/vmt_engine/systems/trading.py](mdc:src/vmt_engine/systems/trading.py) - Trade execution
- **Matching Logic:** [src/vmt_engine/systems/matching.py](mdc:src/vmt_engine/systems/matching.py) - Surplus calculation

## Determinism Rules

- **Sorted Iteration:** All agent loops sorted by `agent.id`
- **Fixed Tie-Breaking:** Consistent resolution of ambiguous situations
- **Frozen Snapshots:** Perception phase captures immutable world state
- **No Race Conditions:** Strict phase ordering prevents state conflicts

## Money-Aware Pairing (P0 Resolved)

- **Money/Mixed Regimes:** Use `estimate_money_aware_surplus()` for pairing decisions
- **Barter-Only Regime:** Use legacy `compute_surplus()` (bit-identical behavior)
- **Money-First Priority:** A↔M > B↔M > A↔B on equal surplus
- **Inventory Feasibility:** Check constraints before pairing