---
globs: src/vmt_launcher/*.py,src/vmt_log_viewer/*.py,src/vmt_pygame/*.py,launcher.py,view_logs.py,main.py
description: Guidelines for GUI applications (PyQt5, Pygame) and entry points
---
## GUI Development Guidelines

### Entry Points
- CLI with Pygame viz: `python main.py scenarios/three_agent_barter.yaml --seed 42`
- GUI launcher: `python launcher.py`
- Log viewer: `python view_logs.py`

### Modules
- Launcher (PyQt5): `src/vmt_launcher/`
- Log Viewer (PyQt5): `src/vmt_log_viewer/`
- Pygame Renderer: `src/vmt_pygame/renderer.py`

### Launcher Features
- Scenario browsing/selection
- Seed configuration
- Launch simulations
- Scenario builder dialog

#### Scenario Builder - Auto-Generate Diverse Agents

**Feature request (not yet implemented):**

Add checkbox in Basic Settings tab: **"Auto-generate diverse agents"**

When enabled:
1. User specifies number of agents N
2. Algorithm auto-fills Utility Functions tab following complementary pairing pattern:
   - Agents 1, 3, 5, ... (odd): Random utility type and parameters
   - Agents 2, 4, 6, ... (even): Complementary to previous agent
3. Auto-fills Initial Inventories with random endowments

**Algorithm details:** See [.cursor/rules/scenarios-telemetry.mdc](mdc:.cursor/rules/scenarios-telemetry.mdc) section "Creating New Test Scenarios"

**Implementation location:** [src/vmt_launcher/scenario_builder.py](mdc:src/vmt_launcher/scenario_builder.py)

**Key functions needed:**
```python
def generate_diverse_utilities(n_agents: int, rng) -> list[dict]:
    """Generate N unique utilities using complementary pairing."""
    # Odd agents: random
    # Even agents: complement previous
    
def generate_random_endowments(n_agents: int, n_goods: int, rng) -> dict:
    """Generate random endowments ~ Uniform(1, 50) per agent per good."""
```

### Log Viewer Features
- Timeline scrubber
- Agent inspection
- Trade history
- CSV export

### Pygame Visualization
- Shows grid cells, agents, trades
- Camera scrolling for large grids
- Real-time info (tick count, stats)

### Patterns & Tips (PyQt5)
- Keep simulation logic separate from UI
- Use threads (`QThread`) for long sims; keep UI responsive
- Provide tooltips/help; handle empty data gracefully
- Validate inputs before creating scenarios

### Troubleshooting
- Display (WSL/remote): ensure X server; `export DISPLAY=:0`
- PyQt5 import: verify installation; reinstall if needed
- Audio warnings (ALSA): safe to ignore
- UI freezes: use `QThread` or periodically call `QApplication.processEvents()`

### References
- PyQt5 docs: https://doc.qt.io/qtforpython/
- Pygame docs: https://www.pygame.org/docs/
- Launcher: [src/vmt_launcher/](mdc:src/vmt_launcher/)
- Log viewer: [src/vmt_log_viewer/](mdc:src/vmt_log_viewer/)
- Renderer: [src/vmt_pygame/renderer.py](mdc:src/vmt_pygame/renderer.py)
