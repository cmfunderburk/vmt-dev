---
alwaysApply: true
---
## VMT Project Overview

**VMT** is a deterministic spatial agent-based simulation for teaching and researching microeconomic behavior. It implements a 7-phase discrete-time tick cycle on an N×N grid where agents engage in bilateral barter trading and resource foraging.

### Critical Setup Requirements

**Virtual Environment**: The directory is named `venv` (NOT `.venv`):
```bash
source venv/bin/activate  # Must always activate before operations
```

**Dependencies**: pygame, numpy, PyQt5, pyyaml, pytest (see [requirements.txt](mdc:requirements.txt))

**Testing**: ALWAYS run `pytest -q` before committing. Expected: 63 passed, 1 skipped.

**Critical Database Gotcha**: If tests fail with schema errors (`table decisions has no column named mode`), delete the stale database:
```bash
rm logs/telemetry.db && pytest -q
```

### The 7-Phase Tick Cycle (Sacred Order)

1. **Perception** → 2. **Decision** → 3. **Movement** → 4. **Trade** → 5. **Forage** → 6. **Resource Regeneration** → 7. **Housekeeping**

See [src/vmt_engine/simulation.py](mdc:src/vmt_engine/simulation.py) and [src/vmt_engine/systems/](mdc:src/vmt_engine/systems/)

### Determinism Rules (Non-Negotiable)

- **Always** process agents sorted by `agent.id`
- **Always** process trade pairs sorted by `(min_id, max_id)`
- **Always** use round-half-up: `floor(price * ΔA + 0.5)`
- **Never** mutate quotes mid-tick (only refresh in Housekeeping)
- **Never** use nondeterministic dict iteration for side effects
- Set `agent.inventory_changed = True` when inventories change

### Type Invariants

- **Integers**: Inventories (A, B), resources, positions, `vision_radius`, `interaction_radius`, `move_budget_per_tick`
- **Floats**: Utility values, prices, `ask_A_in_B`, `bid_A_in_B`
- See [src/vmt_engine/core/state.py](mdc:src/vmt_engine/core/state.py) and [docs/4_typing_overview.md](mdc:docs/4_typing_overview.md)

### Architecture Map

- **Core Engine**: [src/vmt_engine/core/](mdc:src/vmt_engine/core/) - `Agent`, `Inventory`, `Quote`, `Grid`, `SpatialIndex`
- **Economics**: [src/vmt_engine/econ/utility.py](mdc:src/vmt_engine/econ/utility.py) - `UCES`, `ULinear`, zero-safe epsilon handling
- **Systems**: [src/vmt_engine/systems/](mdc:src/vmt_engine/systems/) - All 7 phases, `find_compensating_block` for price search
- **Scenarios**: [src/scenarios/schema.py](mdc:src/scenarios/schema.py), [src/scenarios/loader.py](mdc:src/scenarios/loader.py)
- **Telemetry**: [src/telemetry/](mdc:src/telemetry/) - SQLite batching to `./logs/telemetry.db`
- **GUI**: [src/vmt_launcher/](mdc:src/vmt_launcher/), [src/vmt_log_viewer/](mdc:src/vmt_log_viewer/), [src/vmt_pygame/](mdc:src/vmt_pygame/)

### Entry Points

- **CLI with viz**: `python main.py scenarios/three_agent_barter.yaml --seed 42`
- **GUI launcher**: `python launcher.py`
- **Log viewer**: `python view_logs.py`
- **Programmatic** (requires `PYTHONPATH=.:src`):
  ```python
  from vmt_engine.simulation import Simulation
  from scenarios.loader import load_scenario
  from telemetry.config import LogConfig
  sim = Simulation(load_scenario("scenarios/three_agent_barter.yaml"), seed=42, log_config=LogConfig.debug())
  sim.run(max_ticks=100)
  ```

### Key Algorithms

- **Trading**: One attempt per pair per tick. `find_compensating_block` scans ΔA ∈ [1..dA_max] and candidate prices to find integer-feasible trades with ΔU > 0 for both. See [src/vmt_engine/systems/matching.py](mdc:src/vmt_engine/systems/matching.py) and [trading.py](mdc:src/vmt_engine/systems/trading.py)
- **Movement**: Manhattan distance with deterministic tie-breakers (reduce |dx| first, prefer negative on ties). See [src/vmt_engine/systems/movement.py](mdc:src/vmt_engine/systems/movement.py)
- **Quotes**: Computed from reservation bounds with spread; only refresh when `inventory_changed=True`. See [src/vmt_engine/systems/quotes.py](mdc:src/vmt_engine/systems/quotes.py)
- **Spatial queries**: Use [SpatialIndex](mdc:src/vmt_engine/core/spatial_index.py) bucketed structure for O(N) average proximity checks

### Versioning Policy

- **No SemVer or numeric versions** until explicitly authorized
- **Use date+time-based naming** (e.g., `2025-10-19-1430`) for versions, branches, tags, snapshots
- Do not add or update version badges
- Reference changes by date-time identifiers in PRs and changelogs

### Documentation Hub

- **Project Overview**: [docs/1_project_overview.md](mdc:docs/1_project_overview.md)
- **Technical Manual**: [docs/2_technical_manual.md](mdc:docs/2_technical_manual.md)
- **Strategic Roadmap**: [docs/3_strategic_roadmap.md](mdc:docs/3_strategic_roadmap.md)
- **Type Contracts**: [docs/4_typing_overview.md](mdc:docs/4_typing_overview.md)
