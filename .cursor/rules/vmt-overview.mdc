---
alwaysApply: true
---
The authoritative spec is `PLANS/Planning-Post-v1.md`; behaviors are enforced by `tests/`. Always ignore the `llm_counter` directory.

## Architecture & Determinism

VMT is a deterministic spatial agent-based economic simulation (Python 3.11). Core dependencies: `numpy` (RNG/arrays), `pyyaml` (scenarios), `pygame` (GUI), `PyQt5` (log viewer).

**Fixed 7-phase tick order** (NEVER reorder):
1. **Perception** → 2. **Decision** → 3. **Movement** → 4. **Trade** → 5. **Forage** → 6. **Resource Regeneration** → 7. **Housekeeping**

**Determinism rules:**
- RNG: `np.random.Generator(np.random.PCG64(seed))` in `vmt_engine/simulation.py`
- Always iterate agents by ascending `agent.id`
- Trade pairs by ascending `(min_id,max_id)`
- Use sorted containers—never rely on dict/set iteration

## Economic Logic & Trading

**Utilities** (`vmt_engine/econ/utility.py`):
- `UCES` (CES including Cobb-Douglas limit as ρ→0) and `ULinear`
- Use factory `create_utility(type, params)`—don't instantiate directly
- Bootstrap CES inventories away from zeros

**Reservation bounds → Quotes** (critical pattern):
```python
# DO: Use family-agnostic API
p_min, p_max = reservation_bounds_A_in_B(A, B, eps)
# DON'T: Calculate MRS directly
```
- Zero-inventory guard: Only shift ratios for bounds when A==0 or B==0 using `(A+ε,B+ε)`
- Never shift inputs to `u()` or ΔU checks (see `tests/test_reservation_zero_guard.py`)
- Quote rule: `ask = p_min*(1+spread)`, `bid = p_max*(1-spread)`
- Refresh quotes after inventory changes and in housekeeping

**Trade execution** (one trade per tick per pair):
- Surplus overlap: Consider both `i.bid - j.ask` and `j.bid - i.ask`
- Interaction eligibility: Manhattan distance ≤ `interaction_radius`
- Price search within `[ask_seller, bid_buyer]` includes integer-ΔB targets
- **Rounding**: Round-half-up: `ΔB = floor(p*ΔA + 0.5)`—NOT banker's rounding
- Compensating scan: ΔA=1..`ΔA_max`, accept first with strict ΔU>0 for both
- Trade cooldown: Failed attempts set `trade_cooldown_ticks` (default 5)

## Spatial Mechanics

**Movement** (`systems/movement.py`):
- Manhattan steps with deterministic tie-breaking:
  1. Reduce |dx| before |dy|
  2. Prefer negative direction on ties
  3. If still tied, choose lowest (x,y)
- Diagonal deadlock: Only higher ID agent moves

**Foraging**:
- Target score: `ΔU_arrival * β^dist` using `min(cell.amount, forage_rate)`
- Regeneration: Harvest sets `last_harvested_tick`, wait `resource_regen_cooldown`, then grow at `resource_growth_rate` up to `original_amount`

## Configuration & Testing

**Defaults** (`scenarios/schema.py`):
- Critical: `spread=0.0`, `epsilon=1e-12`
- `ΔA_max=5`, `vision_radius=5`, `interaction_radius=1`, `forage_rate=1`
- `move_budget_per_tick=1`, `beta=0.95`
- `resource_growth_rate=0`, `resource_max_amount=5`, `resource_regen_cooldown=5`
- `trade_cooldown_ticks=5`

**Scenarios** (`scenarios/*.yaml`):
- Parsed by `scenarios/loader.py`
- Key fields: `initial_inventories`, `utilities.mix[{type,weight,params}]`, `params`, `resource_seed{density,amount}`

**Developer workflow**:
```bash
pip install -r requirements.txt
pytest -v  # Set PYTHONPATH=. if needed
python launcher.py  # GUI
python main.py scenarios/three_agent_barter.yaml 42  # CLI
view_logs.py  # Explore SQLite telemetry
```

## Telemetry (v1.1+)

SQLite default (`telemetry/{database.py,config.py,db_loggers.py}`):
- `LogConfig.{summary|standard|debug}()` controls verbosity
- DB at `./logs/telemetry.db`
- Legacy CSV still available but deprecated

## Critical DO's and DON'Ts

✅ **DO**:
- Derive quotes from reservation bounds API
- Use round-half-up for quantity rounding
- Preserve ordering/tie-break rules
- Reference test files for patterns (especially `test_reservation_zero_guard.py`, `test_trade_rounding_and_adjacency.py`)

❌ **DON'T**:
- Quote raw MRS in systems code
- Use banker's rounding or platform-dependent rounding
- Introduce nondeterministic iteration
- Reorder the 7-phase tick