---
description: "Key economic models and logic for the VMT simulation, including utility, money, trade execution, and agent pairing."
---
# VMT Economic Logic

This document details the core economic models and behavioral algorithms used in the VMT simulation.

## Utility and Money System
- Agents make decisions based on maximizing their utility function. The project supports `UCES` (Constant Elasticity of Substitution) and `ULinear` (perfect substitutes) utility functions.
- The money system is built on a **quasilinear utility model**: `U_total = U_goods(A, B) + λ·M`.
- `λ` (`lambda_money`) is the marginal utility of money, which is treated as a fixed parameter in the current implementation (Phases 1-2).
- The authoritative Utility API methods are `u_goods()`, `mu_A()`, and `mu_B()`. Older methods like `u()` and `mu()` are deprecated but remain for backward compatibility, routing to the newer, money-aware methods.
- The formal contract for the utility API is specified in [4_typing_overview.md](mdc:docs/4_typing_overview.md).

## Trade Execution & Pricing
- Trades are governed by the **first-acceptable-trade principle**. The engine's price search algorithm scans for the *first* integer-rounded trade block `(ΔA, ΔB)` that provides **strict utility gain (`ΔU > 0`)** for **both** parties. It is critically important to note this is NOT a highest-surplus search.
- The `exchange_regime` parameter in a scenario (`"barter_only"`, `"money_only"`, `"mixed"`) controls which trade pairs (A↔B, A↔M, B↔M) the generic matching algorithm will consider.
- The core logic for this is in `src/vmt_engine/systems/matching.py`.

## Trade Pairing System
- To avoid O(N²) complexity per tick, agents form persistent bilateral partnerships that last across multiple ticks. Paired agents are exclusively committed and will ignore all other foraging or trading opportunities.
- Pairing is determined by a **three-pass algorithm** during the Decision phase:
    1.  **Preference Ranking**: Agents evaluate and rank all visible, non-cooldown partners by distance-discounted surplus (`surplus × β^distance`).
    2.  **Mutual Consent**: Agents that rank each other as their #1 top choice are immediately paired.
    3.  **Best-Available Fallback**: Any remaining unpaired agents are matched based on the highest-surplus pairings available from the remaining pool.
- Unpairing occurs only after a trade attempt fails (indicating opportunities are exhausted) or a global mode switch.

## Resource Claiming System
- This system is **enabled by default** to prevent inefficient agent clustering on high-value resources.
- In the Decision phase, an agent selecting a forage target "claims" that resource for the current tick. Other agents making their decisions later in the same tick see this claim and are forced to choose an alternative, unclaimed target.
- Claims are transient and are cleared at the start of every tick. Priority in claiming is determined by `agent.id` order, ensuring determinism.