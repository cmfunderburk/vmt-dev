---
globs: src/**/*.py,tests/**/*.py
---

# VMT Validation Rules

## Test Requirements
Every new functionality MUST have corresponding tests before being considered complete.

### Test Coverage Expectations
- New agent behavior: Test with multiple utility functions
- New protocol: Test with minimum 3 different scenarios
- Economic calculations: Verify against hand-calculated examples
- State modifications: Confirm Effects are properly applied

### Test Structure
For any new function in `src/vmt_engine/`, create corresponding test in `tests/`:
```python
def test_function_name_normal_case():
    """Test expected behavior with typical inputs."""
    pass

def test_function_name_edge_case():
    """Test boundary conditions (empty lists, zeros, max values)."""
    pass

def test_function_name_validates_input():
    """Test that invalid inputs raise appropriate errors."""
    with pytest.raises(ValueError):
        function_name(invalid_input)
```

## Validation Checkpoints
Before marking any task complete, verify:

### Economic Validity
- Trades are individually rational (no agent accepts utility loss)
- Conservation laws hold (total resources before = after)
- Prices are non-negative and properly rounded

### Simulation Integrity  
- Telemetry snapshot tests still pass after changes
- No new determinism violations introduced
- Phase execution order remains correct

### Code Quality
- All new functions have docstrings explaining purpose
- Type hints provided for function signatures
- No direct state mutations outside Engine

## Testing Economic Implementations
When implementing economic formulas:
1. Find or create a simple numerical example
2. Calculate expected output by hand
3. Write test asserting exact match:
```python
def test_utility_matches_paper_example():
    """Verify implementation matches published example."""
    # From Smith (2022) Table 1
    goods = {'x': 2, 'y': 3}
    params = {'alpha': 0.5, 'beta': 0.5}
    
    utility = calculate_utility(goods, params)
    
    # Paper shows U = 2.449 for these inputs
    assert abs(utility - 2.449) < 0.001
```

## Running Validation
- Run tests frequently: `pytest tests/test_specific_feature.py`
- Check determinism: `python scripts/compare_telemetry_snapshots.py`
- Verify no regressions: `pytest tests/` should remain green