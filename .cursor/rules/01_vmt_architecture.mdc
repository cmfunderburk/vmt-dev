---
alwaysApply: true
---

# VMT (Visualizing Microeconomic Theory) Architecture Rules

## Protocol → Effect → State Pattern
This is the fundamental architecture of VMT. NO EXCEPTIONS.

### The Flow
1. **Protocols** generate agent decisions (e.g., DecentralizedMarketProtocol)
2. **Effects** represent intended actions (e.g., MoveEffect, TradeEffect)
3. **Engine** validates and applies Effects to update State

### Implementation Rules
- Agents receive read-only `WorldView` snapshots, never mutable World
- Protocols return lists of Effects, never modify state directly
- Example of CORRECT pattern:
  ```python
  # CORRECT: Agent decides to move
  effects.append(MoveEffect(agent_id=agent.id, new_position=(x, y)))
  
  # WRONG: Direct mutation
  # agent.position = (x, y)  # NEVER DO THIS
  ```

## 7-Phase Tick Cycle
Each simulation tick follows this exact sequence:

1. **Phase 1**: Perception - Agents observe environment (neighbors, resources, quotes)
2. **Phase 2**: Decision - Agents select targets and form pairings (Search + Matching protocols)
3. **Phase 3**: Movement - Agents move toward targets
4. **Phase 4**: Trade - Paired agents negotiate trades (Bargaining protocols)
5. **Phase 5**: Foraging - Agents harvest resources
6. **Phase 6**: Resource Regeneration - Resources grow over time
7. **Phase 7**: Housekeeping - Quote refresh, telemetry logging, cleanup

### Phase Discipline
- Each phase has a specific purpose - respect it
- Protocol involvement: Phase 2 (Search + Matching), Phase 4 (Bargaining)
- Decisions are made based on perception snapshots (frozen state)
- Effects are validated and applied deterministically
- Never mix decision and execution logic

## Module Structure
Maintain clear separation of concerns:

- `[protocols/](mdc:src/vmt_engine/protocols/)` - Market mechanisms and decision algorithms
- `[systems/](mdc:src/vmt_engine/systems/)` - Phase-specific system implementations  
- `[protocols/base.py](mdc:src/vmt_engine/protocols/base.py)` - All Effect classes
- `[core/](mdc:src/vmt_engine/core/)` - Grid, Agent, State, and spatial primitives
- `[telemetry/](mdc:src/telemetry/)` - Database logging and metrics

## Protocol Implementation
When implementing new protocols:
- Extend appropriate base class from `[protocols/base.py](mdc:src/vmt_engine/protocols/base.py)`
- Implement required methods: `execute()` for each protocol type
- Return proper Effects, never modify state  
- Include docstring explaining economic mechanism