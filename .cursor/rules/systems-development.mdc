---
globs: src/vmt_engine/systems/*.py
description: Guidelines for modifying simulation systems (the 7 phases)
---
## Systems Development Guidelines

### The 7-Phase Architecture
Files in [src/vmt_engine/systems/](mdc:src/vmt_engine/systems/) implement the phases of each tick. **Phase order is sacred and cannot change.**

#### Phase Order & Files
1. **Perception** - [perception.py](mdc:src/vmt_engine/systems/perception.py) - Agents observe environment (frozen snapshot)
2. **Decision** - [decision.py](mdc:src/vmt_engine/systems/decision.py) - Choose trading partner or foraging target
3. **Movement** - [movement.py](mdc:src/vmt_engine/systems/movement.py) - Move toward targets
4. **Trade** - [matching.py](mdc:src/vmt_engine/systems/matching.py), [trading.py](mdc:src/vmt_engine/systems/trading.py) - Execute bilateral trades
5. **Forage** - [foraging.py](mdc:src/vmt_engine/systems/foraging.py) - Harvest resources
6. **Resource Regeneration** - [foraging.py](mdc:src/vmt_engine/systems/foraging.py) - Resources regrow
7. **Housekeeping** - [housekeeping.py](mdc:src/vmt_engine/systems/housekeeping.py) - Refresh quotes, flush telemetry

**System registration**: [src/vmt_engine/simulation.py](mdc:src/vmt_engine/simulation.py) constructs systems and calls them in `step()`

### Critical Determinism Rules
- Sort agent loops and pair loops; avoid nondeterministic iteration
- No mid‑tick quote mutations; set `inventory_changed=True` and refresh in Housekeeping
- Integer math only; use round‑half‑up for quantity mapping

### Integer Math Requirements
- Quantities and inventories must be integers (round‑half‑up `floor(price*ΔA + 0.5)`)
- Spatial params are integers: `vision_radius`, `interaction_radius`, `move_budget_per_tick`

### Modifying Existing Systems
- Perception: uses [SpatialIndex.query_radius](mdc:src/vmt_engine/core/spatial_index.py); snapshot only
- Decision: evaluate trade surplus or foraging gain; handle mode toggles
- Movement: Manhattan distance; tie‑breakers — reduce |dx| before |dy|; prefer negative on ties; diagonal deadlock: lower `agent.id` wins
- Trade: `find_compensating_block` price search; one attempt per pair per tick; strict ΔU>0; cooldown on failure
- Foraging: harvest rate limit; regen cooldown; set `inventory_changed=True`
- Resource regen: per‑tick growth after cooldown
- Housekeeping: refresh quotes for flagged agents; flush telemetry; reset per‑tick flags

### Adding New System Features
1. Identify the correct phase
2. Preserve determinism (sorted loops)
3. Maintain integer types
4. Update telemetry in [src/telemetry/db_loggers.py](mdc:src/telemetry/db_loggers.py)
5. Add tests in [tests/](mdc:tests/)
6. Schema changes: see DB gotcha in `.cursor/rules/core-invariants.mdc`

### Common Pitfalls
- Unsored loops; mid‑tick quote mutations; forgetting `inventory_changed=True`
- Float inventories/quantities; O(N²) proximity scans (use SpatialIndex)
- Breaking round‑half‑up; adding logic in the wrong phase
