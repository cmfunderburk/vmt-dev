---
description: Testing workflow, validation, and debugging guidelines
---
## Testing & Validation Workflow

### Pre-Commit Checklist

Before committing ANY changes, run through this checklist:

1. **Activate venv**: `source venv/bin/activate`
2. **Delete stale DB if schema changed**: see `.cursor/rules/core-invariants.mdc` (Critical Database Gotcha)
3. **Run tests**: `pytest -q`
4. **Verify results**: All tests must pass
5. **Check dependencies** (if requirements changed): `pip list | grep -E "(pygame|numpy|pyyaml|pytest|PyQt5)"`

### Test Commands

```bash
# Quick test run (preferred)
pytest -q

# Verbose output
pytest -v

# Specific test file
pytest tests/test_barter_integration.py -v

# Run specific test
pytest tests/test_barter_integration.py::test_specific_function -v

# No traceback (summary only)
pytest -q --tb=no
```

**Configuration**: [pytest.ini](mdc:pytest.ini) sets `pythonpath = . src` (required for imports)

### Critical Database Issue

See `.cursor/rules/core-invariants.mdc` → Critical Database Gotcha.

### Running Simulations for Testing

```bash
# GUI (visual verification)
python launcher.py

# CLI with visualization
python main.py scenarios/three_agent_barter.yaml --seed 42

# Headless (requires PYTHONPATH)
PYTHONPATH=.:src python your_test_script.py
```

### Common Test Scenarios

- **Barter integration**: [tests/test_barter_integration.py](mdc:tests/test_barter_integration.py)
- **Trade mechanics**: [tests/test_trade_rounding_and_adjacency.py](mdc:tests/test_trade_rounding_and_adjacency.py)
- **Resource system**: [tests/test_resource_regeneration.py](mdc:tests/test_resource_regeneration.py)
- **Utility functions**: [tests/test_utility_ces.py](mdc:tests/test_utility_ces.py), [tests/test_utility_linear.py](mdc:tests/test_utility_linear.py)
- **Mode toggles**: [tests/test_mode_integration.py](mdc:tests/test_mode_integration.py)

### Debugging Failed Tests

1. **Schema errors** → Delete `logs/telemetry.db`
2. **Import errors** → Check venv is activated and `pytest.ini` exists
3. **Determinism failures** → Verify agent loops are sorted by `agent.id`
4. **Utility/trade failures** → Check integer types maintained, round-half-up used
5. **Assertion failures** → Run with `-v` for detailed output

### Adding New Tests

```python
import pytest
from vmt_engine.simulation import Simulation
from scenarios.loader import load_scenario

def test_your_feature():
    """Test description."""
    scenario = load_scenario("scenarios/your_scenario.yaml")
    sim = Simulation(scenario, seed=42)
    
    # Run simulation
    sim.run(max_ticks=10)
    
    # Assertions
    assert sim.tick == 10
    assert len(sim.agents) > 0
```

Place in [tests/](mdc:tests/) directory with `test_*.py` naming convention.
