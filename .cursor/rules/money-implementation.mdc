---
description: Money system implementation guidelines and architectural decisions
---

# Money System Implementation Guide

## Core Architecture Decisions (Frozen)

### Money Representation
- `M` is an **integer** inventory tracked in minor units (like cents)
- Expose `money_scale â‰¥ 1` in schema for conversion
- Money originates from initial endowments only (no foraging)
- Money conservation: Total `M` across all agents is constant

### Price Aggregation
- **KKT mode**: Use deterministic median-lower of neighbor asks in money per good
- Sort by `(price, seller_id)` for determinism
- Include self-ask in aggregation

### Trading Rules
- Execute trades **only if both agents' Î”U are strictly positive**
- Round-half-up for quantity mapping: `Î”Y = floor(price * Î”X + 0.5)`
- One trade attempt per agent pair per tick
- Apply cooldown on failed trades

### Mode System Architecture (Option A-plus)
Two orthogonal control layers:
1. **Temporal Control** (`mode_schedule`): WHEN activities occur (forage/trade/both)
2. **Type Control** (`exchange_regime`): WHAT bilateral exchanges are permitted

Default: `exchange_regime = "barter_only"` for backward compatibility

### Exchange Regimes
- `barter_only`: Only goods-for-goods (Aâ†”B)
- `money_only`: Only goods-for-money (Aâ†”M, Bâ†”M)  
- `mixed`: All six exchange pairs allowed
- `mixed_liquidity_gated`: Money always allowed; barter conditional on market depth

### Tie-Breaking Policy
When total surplus ties, apply money-first lexicographic ordering:
`(A,M) â‰º (B,M) â‰º (M,A) â‰º (M,B) â‰º (A,B) â‰º (B,A)`

## Implementation Phases

### Phase 1: Infrastructure (No Behavioral Changes) âœ… COMPLETE
- Add money fields with backward-compatible defaults âœ…
- Extend `Inventory` with `M: int = 0` âœ…
- Add `lambda_money`, `lambda_changed` to Agent state âœ…
- Extend telemetry schema (new columns, `tick_states` and `lambda_updates` tables) âœ…
- **Success**: All legacy scenarios run identically âœ…
- **Status**: Complete with 78 tests passing (up from 63 baseline)

### Phase 2: Monetary Exchange Basics (Atomic Sub-phases) ðŸ”„ REPLANNED
Phase 2 has been restructured into three atomic sub-phases after initial attempt:

#### Phase 2a: Data Structures (No Behavior Change)
- Add `u_goods`, `mu_A`, `mu_B` methods; `u_total` function
- Change `Agent.quotes` to `dict[str, float]`
- Implement `compute_quotes` returning all barter + money pairs
- Add `filter_quotes_by_regime` helper
- **Gate**: All 78 legacy tests still pass

#### Phase 2b: Generic Matching (Isolated)
- Implement `find_compensating_block_generic`
- Create `find_best_trade` for surplus maximization
- Add `execute_trade` with inventory updates
- **Gate**: Unit tests with mock agents pass

#### Phase 2c: Integration
- Integrate generic matching into `TradeSystem`
- Decouple `DecisionSystem` (targeting only)
- Create `scenarios/money_test_basic.yaml`
- **Gate**: E2E tests verify monetary trades, conservation

### Phase 3: KKT Î» Estimation
- Implement neighbor price collection and median-lower aggregation
- Compute `Î»_hat = min(MU_A/pÌ‚_A, MU_B/pÌ‚_B)`
- Smooth: `Î»_{t+1} = (1âˆ’Î±)Â·Î»_t + Î±Â·Î»Ì‚` with bounds clamping
- Add cross-quote inference fallback
- **Success**: Î» converges deterministically, no O(NÂ²) paths

### Phase 4: Mixed Regimes
- Enable all six exchange pairs in `mixed` regime
- Implement money-first tie-breaking
- Verify mode Ã— regime interaction (temporal Ã— type control)
- **Success**: Both money and barter trades occur with correct priorities

### Phase 5: Liquidity Gating
- Compute depth = count of distinct neighbor money quotes
- Enable barter when depth < `min_quotes` threshold
- Implement per-agent pair filtering based on local liquidity
- **Success**: Agents fall back to barter in thin markets

### Phase 6: Polish and Documentation
- Enhance renderer: money visualization, mode overlays, Î» heatmap
- Extend log viewer: money filters, Î» plots, mode timeline
- Create 5 demo scenarios showcasing different regimes
- Complete user guide and technical documentation
- **Success**: Production-ready with full observability

## Critical Invariants

### Determinism Requirements
- **Always** process agents sorted by `agent.id`
- **Always** process trade pairs sorted by `(min_id, max_id)`
- **Always** use stable sort keys `(price, seller_id)` for aggregation
- **Never** mutate quotes mid-tick (only in Housekeeping)
- **Never** use nondeterministic dict iteration for side effects

### Type Safety
- **Integers**: `M`, resources, positions, radii, move budgets
- **Floats**: Utility values, prices, `lambda_money`, spreads
- Round-half-up for all quantity conversions

### Performance Constraints
- Price aggregation must remain O(N) average complexity
- Use `SpatialIndex` for neighbor queries
- Batch telemetry writes

## Testing Requirements

### Phase Gates (Must-Pass)
- Unit tests for Î» estimation determinism
- Integration tests for money conservation
- Strictly positive surplus enforcement tests
- Exchange regime behavior validation
- Determinism snapshots with fixed seeds
- Performance benchmarks (no O(NÂ²) paths)

### Backward Compatibility
- All legacy scenarios must run identically
- `exchange_regime` defaults to `"barter_only"`
- Money fields default to 0/NULL
- Existing telemetry queries continue working

## Pedagogical Goals

### Teaching Objectives
- Demonstrate emergence of money vs. barter
- Show price discovery through Î» convergence
- Illustrate market thickness effects on exchange types
- Model institutional preference for monetary exchange

### Demo Scenarios Required
1. Simple monetary exchange (Why money?)
2. KKT convergence (How agents learn prices)
3. Mixed regime dynamics (When is barter efficient?)
4. Liquidity zones (Market thickness effects)
5. Mode Ã— regime interaction (Time constraints with money)

## Code Organization

### File Structure
- **Core**: [src/vmt_engine/core/state.py](mdc:src/vmt_engine/core/state.py) - `Inventory.M`, `Agent.lambda_money`
- **Economics**: [src/vmt_engine/econ/utility.py](mdc:src/vmt_engine/econ/utility.py) - `u_goods()`, `u_total()`, marginal utilities
- **Trading**: [src/vmt_engine/systems/trading.py](mdc:src/vmt_engine/systems/trading.py) - Generalized matching and execution
- **Quotes**: [src/vmt_engine/systems/quotes.py](mdc:src/vmt_engine/systems/quotes.py) - Money reservation prices
- **Housekeeping**: [src/vmt_engine/systems/housekeeping.py](mdc:src/vmt_engine/systems/housekeeping.py) - Î» updates in KKT mode
- **Schema**: [src/scenarios/schema.py](mdc:src/scenarios/schema.py) - Money params validation
- **Telemetry**: [src/telemetry/database.py](mdc:src/telemetry/database.py) - Extended schema

### Key Algorithms
- **find_compensating_block_generic()**: Search for mutually beneficial trades
- **_aggregate_prices_median_lower()**: Deterministic price aggregation
- **_compute_liquidity_depth()**: Count distinct money quotes
- **_update_lambda_kkt()**: Endogenous Î» estimation

## Error Handling

### Validation Points
- `money_scale` must be â‰¥ 1
- `lambda_bounds`: `lambda_min < lambda_max`, both positive
- If `exchange_regime` needs money, require `M` in initial inventories
- Catch negative `M` early (invariant violation)

### User-Friendly Errors
- Clear messages for missing money in money-only regime
- Helpful hints for Î» bounds violations
- Descriptive telemetry schema migration warnings