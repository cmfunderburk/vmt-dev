# Demo 06: Money-Aware Pairing
# 
# This scenario demonstrates the P0 fix for pairing-trading mismatch.
# Agents now rank neighbors using money-aware surplus estimates in money_only
# and mixed regimes, ensuring they pair with partners they can actually trade with.
#
# Key Points:
# - In money_only: Agents prefer partners with viable monetary trades (A↔M, B↔M)
# - Money-first tie-breaking: When surplus is equal, money pairs win (A↔M > B↔M > A↔B)
# - Deterministic: Same seed yields identical pairings
# - Backward compatible: barter_only mode unchanged

schema_version: 1
name: "demo_06_money_aware_pairing"
N: 10
agents: 3
mode: "trade"  # Agents only trade (no foraging)

params:
  exchange_regime: "mixed"  # Allow all trade types: A↔B, A↔M, B↔M
  vision_radius: 10         # See entire grid
  interaction_radius: 1     # Must be adjacent to trade
  move_budget_per_tick: 1   # Move 1 cell per tick
  beta: 0.95                # Distance discount factor
  dA_max: 50                 # Max trade size
  epsilon: 0.000000001  # 1e-9 (YAML scientific notation requires quotes)
  money_scale: 10           # Scale money by 10
  spread: 0.0
  forage_rate: 1
  trade_cooldown_ticks: 5
  log_preferences: true     # Log full preference rankings (see pair_type)

# Three agents with complementary preferences
# Agent 0: Wants A (has lots of B and M)
# Agent 1: Wants B (has lots of A and M)  
# Agent 2: Neutral/balanced

utilities:
  mix:
    - type: "ces"
      weight: 0.33
      params:
        rho: 0.9
        wA: 0.8      
        wB: 0.2
    
    - type: "ces"
      weight: 0.33
      params:
        rho: 0.5
        wA: 0.2      
        wB: 0.8
    
    - type: "ces"
      weight: 0.34
      params:
        rho: -0.5
        wA: 0.7      
        wB: 0.3

# Starting inventories
# Agent 0: Wants A, values money HIGHLY (lambda=2.0) → cheap to buy with money
# Agent 1: Wants B, values money LOWLY (lambda=0.5) → expensive to buy with money  
# Agent 2: Neutral valuation (lambda=1.0)
#
# With different lambda values, monetary trades become attractive!
# - Agent 0 (high lambda) has cheap ask prices in M (will sell cheap for money)
# - Agent 1 (low lambda) has high bid prices in M (willing to pay lots of money)
# - This creates surplus opportunity in monetary trades!
initial_inventories:
  A: [50, 200, 100]    # Agent 0 has low A, Agent 1 has lots
  B: [200, 50, 100]    # Agent 0 has lots B, Agent 1 has low
  M: [1000, 1000, 500] # All have money
  lambda_money: [2.0, 0.5, 1.0]  # Agent 0 values money highly, Agent 1 values it low

agent_positions:
  - [5, 5]    # Agent 0
  - [5, 6]    # Agent 1 (adjacent to 0)
  - [5, 7]    # Agent 2 (adjacent to 1)

resource_seed:
  density: 0.1  # No resources (trade-only scenario)
  amount: 5

# Expected Behavior:
# ==================
# With different lambda values, monetary trades become very attractive!
#
# Agent 0 (lambda=2.0, high money value):
#   - ask_A_in_M = MU_A / 2.0 = LOW (willing to sell A cheaply for money)
#   - bid_B_in_M = MU_B / 2.0 = LOW (not willing to pay much money for B)
#
# Agent 1 (lambda=0.5, low money value): 
#   - ask_A_in_M = MU_A / 0.5 = HIGH (wants lots of money to sell A)
#   - bid_B_in_M = MU_B / 0.5 = HIGH (willing to pay lots of money for B)
#
# This creates HUGE monetary surplus opportunities:
#   - For B↔M: Agent 1's high bid_B_in_M >> Agent 0's low ask_B_in_M
#   - For A↔M: Different valuations create trading opportunities
#
# With money-aware pairing, agents should now prefer monetary trades over barter!
# The estimator will evaluate all three pairs and choose the highest surplus.
#
# Expected: Monetary trades (A↔M or B↔M) will dominate due to lambda differences
#
# To observe:
# ===========
# 1. Run: python main.py scenarios/demos/demo_06_money_aware_pairing.yaml --max-ticks 10 --seed 42
# 2. Check telemetry logs/telemetry.db:
#    SELECT * FROM preferences WHERE tick = 0 ORDER BY agent_id, rank;
#    → Should show pair_type column with "A<->M", "B<->M", or "A<->B"
# 3. Check trades:
#    SELECT * FROM trades WHERE exchange_pair_type IN ('A<->M', 'B<->M');
#    → Should see B<->M monetary trades! Agent 1 buys B from Agent 0 using money
# 4. Verify determinism:
#    Run twice with same seed → identical pairing and trade sequences
#
# Result with seed=42:
# - B↔M surplus = 2.094 (Agent 1's high bid - Agent 0's low ask)
# - Multiple B↔M trades execute: Agent 1 pays money to Agent 0 for good B
# - This demonstrates how different money valuations create trading opportunities!
#
# IMPORTANT NOTE - Estimator Limitation:
# =======================================
# The pairing estimator uses QUOTE OVERLAPS (price differences) as a heuristic.
# In this scenario, it predicts A↔B has 4.303 surplus vs B↔M with 2.094.
# 
# However, ACTUAL UTILITY CALCULATIONS show:
# - A↔B: 1.295 total surplus
# - B↔M: 2.330 total surplus (higher!)
#
# The estimator was wrong, but agents still execute the better B↔M trade because
# the Trading phase uses full utility calculations. This shows the trade-off:
# - Fast pairing (O(1) per neighbor) with approximate ranking
# - Accurate trading (full utility search) once paired
#
# For perfect pairing accuracy, you would need to run find_all_feasible_trades()
# for every neighbor in Decision phase, but this is O(N × dA_max × prices) cost.

