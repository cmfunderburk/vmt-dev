# VMT Comprehensive Scenario Template
# This file demonstrates ALL available parameters with their valid ranges and typical values
# Use this as a reference when creating new scenarios

# =============================================================================
# TOP-LEVEL METADATA (Required)
# =============================================================================

schema_version: 1                    # REQUIRED: Always 1 for current implementation
name: "Comprehensive Example"        # REQUIRED: Human-readable scenario name
N: 20                               # REQUIRED: Grid size (N×N), typical: 10-40, range: > 0
agents: 15                          # REQUIRED: Number of agents, typical: 5-50, range: > 0

# =============================================================================
# INITIAL INVENTORIES (Required)
# =============================================================================

initial_inventories:
  # Good A - REQUIRED: Starting endowment of first tradeable good
  A: 10                             # Fixed integer: all agents get same amount, range: ≥ 0
  # A: [10, 5, 0, 8, 2]            # List: heterogeneous agents, length must equal 'agents'
  # A: {uniform_int: [5, 15]}       # Distribution: planned feature, not widely used
  
  # Good B - REQUIRED: Starting endowment of second tradeable good  
  B: 10                             # Fixed integer: all agents get same amount, range: ≥ 0
  # B: [0, 5, 10, 2, 8]             # List: heterogeneous agents, length must equal 'agents'
  # B: {uniform_int: [5, 15]}       # Distribution: planned feature, not widely used
  
  # Money (M) - REQUIRED for monetary regimes, optional for barter_only
  M: 100                            # Fixed integer: all agents get same amount, range: ≥ 0
  # M: [100, 50, 75, 200, 25]       # List: heterogeneous money holdings, length must equal 'agents'
  # M: {uniform_int: [50, 150]}     # Distribution: planned feature, not widely used
  
  # Per-agent lambda values (optional) - overrides params.lambda_money
  # RECOMMENDED: Use heterogeneous λ values to create trading opportunities
  lambda_money: [1.0, 2.0, 0.5, 1.5, 0.8]  # List: agent-specific λ values, range: > 0, length must equal 'agents'

# =============================================================================
# UTILITY FUNCTIONS (Required)
# =============================================================================

utilities:
  mix:
    # CES (Constant Elasticity of Substitution) - Most flexible utility
    - type: "ces"
      weight: 0.4                   # Weight in mix, range: > 0, sum must = 1.0
      params:
        rho: 0.5                    # Elasticity parameter, range: ≠ 1.0, typical: -1.0 to 0.9
        wA: 0.6                     # Weight for good A, range: > 0, typical: 0.1-0.9
        wB: 0.4                     # Weight for good B, range: > 0, typical: 0.1-0.9
    
    # Linear (Perfect Substitutes) - Simple baseline utility
    - type: "linear"
      weight: 0.3                   # Weight in mix, range: > 0, sum must = 1.0
      params:
        vA: 2.0                     # Value of good A, range: > 0, typical: 0.5-5.0
        vB: 1.5                     # Value of good B, range: > 0, typical: 0.5-5.0
    
    # Quadratic (Bliss Point) - Non-monotonic preferences with satiation
    - type: "quadratic"
      weight: 0.2                   # Weight in mix, range: > 0, sum must = 1.0
      params:
        A_star: 20.0                # Bliss point for A, range: > 0, typical: 10-50
        B_star: 15.0                # Bliss point for B, range: > 0, typical: 10-50
        sigma_A: 0.5                # Curvature for A, range: > 0, typical: 0.1-2.0
        sigma_B: 0.5                # Curvature for B, range: > 0, typical: 0.1-2.0
        gamma: 0.1                  # Cross-curvature, range: ≥ 0, typical: 0.0-0.5
    
    # Translog (Transcendental Logarithmic) - Flexible functional form
    - type: "translog"
      weight: 0.1                   # Weight in mix, range: > 0, sum must = 1.0
      params:
        alpha_0: 0.0                # Constant term, range: any, typical: 0.0-2.0
        alpha_A: 0.5                # First-order coefficient A, range: > 0, typical: 0.1-1.0
        alpha_B: 0.5                # First-order coefficient B, range: > 0, typical: 0.1-1.0
        beta_AA: -0.1               # Second-order coefficient A, range: any, typical: -0.5 to 0.0
        beta_BB: -0.1               # Second-order coefficient B, range: any, typical: -0.5 to 0.0
        beta_AB: 0.05               # Cross-partial term, range: any, typical: -0.2 to 0.2
    
    # Stone-Geary (Subsistence) - Non-homothetic preferences with subsistence levels
    # NOTE: Initial inventories MUST satisfy A > gamma_A AND B > gamma_B for all agents
    - type: "stone_geary"
      weight: 0.0                   # Weight in mix, range: > 0, sum must = 1.0
      params:
        alpha_A: 0.6                # Preference weight A, range: > 0, typical: 0.1-0.9
        alpha_B: 0.4                # Preference weight B, range: > 0, typical: 0.1-0.9
        gamma_A: 5.0                # Subsistence level A, range: ≥ 0, typical: 0-20
        gamma_B: 3.0                # Subsistence level B, range: ≥ 0, typical: 0-20

# =============================================================================
# SIMULATION PARAMETERS (All Optional - have sensible defaults)
# =============================================================================

params:
  # -------------------------------------------------------------------------
  # SPATIAL PARAMETERS
  # -------------------------------------------------------------------------
  
  vision_radius: 10                 # Manhattan distance agents can perceive, default: 5, range: ≥ 0
                                   # Typical: N/4 to N/2 for local markets, N for global information
  
  interaction_radius: 1            # Manhattan distance for trading, default: 1, range: ≥ 0
                                   # Typical: 1 (adjacent cells), should be ≤ vision_radius
  
  move_budget_per_tick: 1          # Maximum Manhattan distance per tick, default: 1, range: > 0
                                   # Typical: 1-3, rule of thumb: ≈ vision_radius/5
  
  spread: 0.05                     # Bid-ask spread factor, default: 0.0, range: ≥ 0
                                   # Typical: 0.0 (no spread), 0.05-0.15 (realistic), 0.3+ (high friction)
  
  # -------------------------------------------------------------------------
  # TRADING PARAMETERS
  # -------------------------------------------------------------------------
  
  dA_max: 5                        # Maximum trade size to search, default: 5, range: > 0
                                   # Typical: 1-3 (small), 5-10 (moderate), 20+ (large)
  
  trade_cooldown_ticks: 5          # Cooldown after failed trade, default: 5, range: ≥ 0
                                   # Typical: 5-10, 0 (no cooldown), > 20 (long cooldown)
  
  trade_execution_mode: "minimum"  # Trade batch size strategy, default: "minimum", range: see below
                                   # Options: "minimum" (smallest beneficial trade, pedagogical),
                                   #          "maximum" (largest beneficial trade at price, efficient)
                                   # Typical: "minimum" for teaching, "maximum" for faster convergence
  
  # -------------------------------------------------------------------------
  # FORAGING PARAMETERS
  # -------------------------------------------------------------------------
  
  forage_rate: 2                   # Max resource harvest per tick, default: 1, range: > 0
                                   # Typical: 1-3, should be ≤ resource_max_amount for multi-tick harvesting
  
  resource_growth_rate: 1          # Resource regeneration per tick, default: 0, range: ≥ 0
                                   # Typical: 0 (no regeneration), 1-2 (slow), ≥ forage_rate (sustainable)
  
  resource_max_amount: 8           # Max resource per cell, default: 5, range: > 0
                                   # Typical: 5-10, should be > forage_rate for multi-harvest cells
  
  resource_regen_cooldown: 5        # Ticks before depleted cell regenerates, default: 5, range: ≥ 0
                                   # Typical: 5-10, 0 (immediate), >> move_budget (forces movement)
  
  # -------------------------------------------------------------------------
  # RESOURCE CLAIMING SYSTEM
  # -------------------------------------------------------------------------
  
  enable_resource_claiming: true    # Enable resource claiming system, default: true, range: true/false
                                   # Recommendation: true for realistic simulations
  
  enforce_single_harvester: true    # Only one agent harvests per cell per tick, default: true, range: true/false
                                   # Recommendation: true for realistic simulations
  
  # -------------------------------------------------------------------------
  # ECONOMIC PARAMETERS
  # -------------------------------------------------------------------------
  
  epsilon: 1e-12                   # Numerical stability constant, default: 1e-12, range: > 0
                                   # Typical: 1e-9 to 1e-15, use default unless numerical issues
  
  beta: 0.95                       # Distance discount factor, default: 0.95, range: (0, 1]
                                   # Typical: 0.8-0.95, 1.0 (no distance penalty), 0.5 (strong locality)
  
  # -------------------------------------------------------------------------
  # MONEY SYSTEM PARAMETERS
  # -------------------------------------------------------------------------
  
  # MONEY SYSTEM REMOVED: VMT is now a pure barter economy (A<->B trades only)
  # The following parameters are NO LONGER SUPPORTED:
  # - exchange_regime (was: "barter_only", "money_only", "mixed")
  # - money_mode (was: "quasilinear", "kkt_lambda")
  # - money_scale, lambda_money, lambda_update_rate, lambda_bounds
  # - M inventory (money holdings)
  # All trades are now direct barter: agents exchange Good A for Good B
  
  # -------------------------------------------------------------------------
  # TELEMETRY PARAMETERS (Optional)
  # -------------------------------------------------------------------------
  
  log_preferences: true            # Log agent preference rankings to database, default: false, range: true/false
                                   # Typical: false (standard runs), true (detailed analysis of pairing behavior)
                                   # Note: Increases database size, primarily for research/debugging

# =============================================================================
# RESOURCE SEEDING (Required)
# =============================================================================

resource_seed:
  density: 0.3                     # Probability of resource per cell, range: [0, 1]
                                   # Typical: 0.1-0.3 (sparse), 0.5 (half cells), 1.0 (all cells)
  
  amount: 5                        # Resource amount per seeded cell, range: > 0
                                   # Typical: 3-10, should be > forage_rate for multi-harvest
  # amount: {uniform_int: [3, 7]}  # Distribution: planned feature, not widely used

# =============================================================================
# MODE SCHEDULE (Optional - if omitted, agents are in "both" mode)
# =============================================================================

mode_schedule:
  type: "global_cycle"              # Scheduling pattern, range: "global_cycle" (only implemented)
                                   # Future: "agent_specific", "spatial_zones"
  
  forage_ticks: 15                 # Duration of forage mode, range: > 0
                                   # Typical: 10-30, longer = more resource accumulation
  
  trade_ticks: 20                  # Duration of trade mode, range: > 0
                                   # Typical: 15-40, longer = more trading opportunities
  
  start_mode: "forage"             # Initial mode, range: "forage", "trade", default: "forage"
                                   # "forage" (start with resource gathering), "trade" (start with trading)

# =============================================================================
# PROTOCOL CONFIGURATION (Optional - defaults to legacy protocols)
# =============================================================================

# Search protocol - determines how agents select movement/interaction targets
search_protocol: "legacy_distance_discounted"           # Options: "legacy_distance_discounted", "random_walk"
                                   # Default: "legacy_distance_discounted" (distance-discounted utility-based search)
                                   # If omitted, uses legacy_distance_discounted protocol

# Matching protocol - determines how agents form bilateral pairs
matching_protocol: "legacy_three_pass"  # Options: "legacy_three_pass", "random_matching"
                                   # Default: "legacy_three_pass" (mutual consent + greedy surplus)
                                   # If omitted, uses legacy protocol

# Bargaining protocol - determines how paired agents negotiate trades
bargaining_protocol: "legacy_compensating_block"  # Options: "legacy_compensating_block", "split_difference"
                                   # Default: "legacy_compensating_block" (first feasible trade)
                                   # If omitted, uses legacy protocol

# Protocol Resolution Order:
# 1. CLI arguments (--search-protocol, --matching-protocol, --bargaining-protocol) - highest priority
# 2. YAML configuration (above fields) - medium priority
# 3. Legacy defaults - fallback if neither CLI nor YAML specified

# Phase 2a Protocol Options:
# - search_protocol: "random_walk" - Pure stochastic exploration baseline
# - matching_protocol: "random_matching" - Random pairing baseline
# - bargaining_protocol: "split_difference" - Equal surplus division baseline

# =============================================================================
# PARAMETER SELECTION GUIDELINES
# =============================================================================

# Vision Radius Guidelines:
# - Global information: vision_radius = N
# - Local markets: vision_radius = N/4 to N/2  
# - Extreme locality: vision_radius = 1-5

# Move Budget Guidelines:
# - Slow economy: move_budget_per_tick = 1
# - Moderate: move_budget_per_tick = 2-3
# - Fast (large grids): move_budget_per_tick = N/10
# - Rule of thumb: move_budget ≈ vision_radius / 5

# Trade Size Guidelines:
# - Small trades: dA_max = 1-3
# - Typical: dA_max = 5-10
# - Large trades: dA_max = 20+
# - Constraint: should be ≤ typical inventory levels / 2

# Trade Execution Mode Guidelines:
# - minimum: Execute smallest mutually beneficial trade (pedagogical, backward compatible)
#   - More trade events, gradual convergence
#   - Better for teaching trade mechanics and observing incremental adjustments
#   - Default mode for backward compatibility
# - maximum: Execute largest mutually beneficial trade at chosen price (efficient)
#   - Fewer but larger trades, faster convergence
#   - Better for large-scale simulations and reaching equilibrium quickly
#   - Requires larger dA_max to be effective
# - Both modes reach same equilibrium, differ only in convergence speed

# Resource Density Guidelines:
# - Resource-poor: density = 0.1-0.2
# - Moderate: density = 0.3-0.4
# - Resource-rich: density = 0.5+

# Spread Guidelines:
# - No transaction costs: spread = 0.0
# - Realistic: spread = 0.05-0.15
# - High friction: spread = 0.3+

# MONEY SYSTEM REMOVED: VMT is now a pure barter economy
# All trades are direct Good A <-> Good B exchanges
# Money parameters (exchange_regime, money_mode, money_scale, lambda_money, M inventory) are no longer supported

# Utility Mix Guidelines:
# - Single type: weight = 1.0 for one utility
# - Multiple types: weights must sum to 1.0
# - CES: Most flexible, good for general use
# - Linear: Simple baseline, perfect substitutes
# - Quadratic: Non-monotonic, shows satiation
# - Translog: Flexible functional form, good for estimation
# - Stone-Geary: Non-homothetic, subsistence constraints

# =============================================================================
# IMPLEMENTATION STATUS
# =============================================================================

# FULLY IMPLEMENTED FEATURES:
# - All top-level parameters (schema_version, name, N, agents)
# - Initial inventory types (A, B) - barter economy only
# - All utility functions (CES, Linear, Quadratic, Translog, Stone-Geary)
# - All spatial parameters (vision_radius, interaction_radius, move_budget_per_tick, spread)
# - All trading parameters (dA_max, trade_cooldown_ticks, trade_execution_mode)
# - All foraging parameters (forage_rate, resource_growth_rate, resource_max_amount, resource_regen_cooldown)
# - All resource claiming parameters (enable_resource_claiming, enforce_single_harvester)
# - All economic parameters (epsilon, beta)
# - Barter-only economy: A<->B trades
# - Telemetry parameters: log_preferences (optional)
# - Resource seeding (density, amount)
# - Mode scheduling (global_cycle type)

# PLANNED BUT NOT YET IMPLEMENTED:
# - Additional utility functions or trading mechanisms (TBD)
# - Distribution syntax for inventories and resources
# - Agent-specific and spatial_zones mode scheduling types

# =============================================================================
# COMMON VALIDATION ERRORS TO AVOID
# =============================================================================

# 1. Utility Weights Don't Sum to 1.0:
#    - All weights in utilities.mix must sum exactly to 1.0 (within 1e-6 tolerance)

# 2. Stone-Geary Below Subsistence:
#    - Initial inventories must satisfy A > gamma_A AND B > gamma_B for all agents

# 3. List Length Mismatch:
#    - If using lists for inventories, length must equal 'agents' count

# 4. CES with rho = 1.0:
#    - rho cannot equal 1.0 (mathematical singularity), use 0.999 or 1.001

# 5. Invalid Mode Schedule Type:
#    - Only "global_cycle" is currently implemented

# =============================================================================
# REPRODUCIBILITY NOTES
# =============================================================================

# Use seeds for reproducible experiments:
# python launcher.py scenarios/my_scenario.yaml --seed 42

# Deterministic elements (same seed → same results):
# - Agent movement
# - Trade order (sorted by agent ID)  
# - Pairing algorithm

# Stochastic elements (seed-controlled):
# - Initial agent positions (if not specified)
# - Resource placement (based on density)
# - Utility assignment (based on weight proportions)

# =============================================================================
# PERFORMANCE CONSIDERATIONS
# =============================================================================

# Grid processing: O(N²) per tick for resource regeneration and rendering
# Vision computation: O(agents × vision_radius²) per tick
# Trade search: O(dA_max × prices) per trade attempt
# Recommended agent density: 1-10% of cells (agents/N²)

# Large scenarios (N=40+, agents=50+):
# - Use smaller vision_radius for performance
# - Consider mode_schedule to reduce computation
# - Monitor memory usage for long runs

# =============================================================================
# END OF COMPREHENSIVE TEMPLATE
# =============================================================================
